<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.11.1.0">
<procedure name="main">
<interface/>
<body>
<c></c>
<c>* HALCON script: Dual Caltab Pose Estimation with Relative Transformation</c>
<c>* Descrizione:</c>
<c>*   - Rileva due caltab (marker di calibrazione) da un'immagine</c>
<c>*   - Calcola la pose di entrambi rispetto alla camera</c>
<c>*   - Trasla la pose al centro del marker (+37.5 mm su X e Y)</c>
<c>*   - Calcola la trasformazione relativa (T1⁻¹ * T2)</c>
<c>*   - Estrae traslazione, distanza, e quaternioni</c>
<c>*   - Scrive i risultati in un file CSV</c>
<c></c>
<c>* Parametri</c>
<l>expected_distance_mm := 155.6</l>
<l>offset_x := 37.5</l>
<l>offset_y := 37.5</l>
<l>offset_z := 0.0</l>
<c></c>
<c>* -- Carica immagine e modello caltab</c>
<l>read_image (Image, '/home/comau/Scrivania/progetto borsa 1 /IMMAGINI/charuco 5x5/in piano/Basler_acA2040-35gm__23324651__20250529_160713264_0000.tiff')</l>
<c></c>
<c>* -- Carica parametri di calibrazione camera</c>
<c>* Assumi già convertiti in file Halcon .dat oppure inseriti direttamente</c>
<l>CameraParam := ['area_scan_polynomial', 0.00340972, 0.00345, 712.5043, 781.75, 2064, 1544,                 -8355.593165, 696992927.827, -24601284614403.0, 3.6171082, -0.518271]</l>
<c></c>
<c>* -- Trova i due caltab nella scena</c>
<c>* Si assume che entrambi siano dello stesso tipo</c>
<l>find_caltab (Image, CaltabRegion1, 3, 7, 'caltab_3x3_descr.dat')</l>
<l>find_caltab (Image, CaltabRegion2, 3, 7, 'caltab_3x3_descr.dat')</l>
<c></c>
<c>* -- Calcola la pose dei due caltab rispetto alla camera</c>
<l>find_caltab_pose (CaltabRegion1, CameraParam, 'caltab_3x3_descr.dat', Pose1, Quality1)</l>
<l>find_caltab_pose (CaltabRegion2, CameraParam, 'caltab_3x3_descr.dat', Pose2, Quality2)</l>
<c></c>
<c>* -- Trasforma pose in matrice 4x4</c>
<l>pose_to_hom_mat3d (Pose1, H1)</l>
<l>pose_to_hom_mat3d (Pose2, H2)</l>
<c></c>
<c>* -- Applica offset centro marker (+37.5mm)</c>
<l>hom_mat3d_translate (H1, offset_x, offset_y, offset_z, H1_center)</l>
<l>hom_mat3d_translate (H2, offset_x, offset_y, offset_z, H2_center)</l>
<c></c>
<c>* -- Calcola trasformazione relativa: T1⁻¹ * T2</c>
<l>hom_mat3d_invert (H1_center, H1_inv)</l>
<l>hom_mat3d_compose (H1_inv, H2_center, H_rel)</l>
<c></c>
<c>* -- Estrai traslazione</c>
<l>hom_mat3d_to_pose (H_rel, PoseRel)</l>
<l>get_pose_param (PoseRel, 'x', Tx)</l>
<l>get_pose_param (PoseRel, 'y', Ty)</l>
<l>get_pose_param (PoseRel, 'z', Tz)</l>
<l>vector_length_3d (Tx, Ty, Tz, Distance)</l>
<c></c>
<c>* -- Calcola errore rispetto distanza attesa</c>
<l>Error_mm := Distance - expected_distance_mm</l>
<c></c>
<c>* -- Estrai quaternione dalla rotazione</c>
<l>quaternion_from_pose (PoseRel, Qx, Qy, Qz, Qw)</l>
<c></c>
<c>* -- Scrivi risultati su CSV</c>
<l>csv_file := 'output/halcon_results.csv'</l>
<l>if (FileExists(csv_file) == false)</l>
<c>    * scrive header</c>
<l>    open_file (csv_file, 'append', FileHandle)</l>
<l>    fwrite_string (FileHandle, 'image_name,tx_mm,ty_mm,tz_mm,distance_mm,error_mm,qx,qy,qz,qw\n')</l>
<l>    close_file (FileHandle)</l>
<l>endif</l>
<c></c>
<l>open_file (csv_file, 'append', FileHandle)</l>
<l>fwrite_string (FileHandle, 'calibration_scene_01.tif,' + Tx + ',' + Ty + ',' + Tz + ',' + Distance + ',' + Error_mm + ',' + Qx + ',' + Qy + ',' + Qz + ',' + Qw + '\n')</l>
<l>close_file (FileHandle)</l>
<c></c>
<c>* -- Debug: visualizza assi pose originali</c>
<l>dev_set_window (0)</l>
<l>dev_display (Image)</l>
<l>disp_pose_3d (Pose1, CameraParam, 0.075, 'red', 'green', 'blue')</l>
<l>disp_pose_3d (Pose2, CameraParam, 0.075, 'orange', 'cyan', 'magenta')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
