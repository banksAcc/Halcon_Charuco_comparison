<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* Script Halcon per analisi marker dotted</c>
<c>* Input: </c>
<c>*   - Cartella con immagini (formato qualsiasi supportato da Halcon)</c>
<c>*   - File di calibrazione camera in formato JSON</c>
<c>*   - File caltab.descr standard per marker 75mm</c>
<c>* Output:</c>
<c>*   - File CSV con risultati per immagini dove sono rilevati entrambi i marker</c>
<l>dev_update_off()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<c></c>
<c>* --- Parametri configurabili ---</c>
<l>imageFolder := '../dataset_3'</l>
<l>outputCSVFile := '../output/results_halcon_stop_dataset3.csv'</l>
<l>caltabFile := './caltab_075mm.descr'</l>
<l>markerDistanceNominal := 0.141421356</l>
<l>import './CH_Find_Calib_Pattern_double.hdvp'</l>
<c></c>
<c>* --- Caricamento parametri di calibrazione ---</c>
<c>* Supponendo che il file JSON sia come nell'esempio</c>
<c></c>
<l>*gen_cam_par_area_scan_polynomial (0.0129092, 527.412, -32029000.0, 1234450000000.0, 0.15534, 0.0162498, 3.45167e-06, 3.45e-06, 967.316, 738.877, 2064, 1544, CameraParam)</l>
<c></c>
<l>read_cam_par( '/home/comau/Scrivania/progetto borsa 1 /GIT_Halcon_Charuco_comparison/HALCON/calibrazione_halcon.dat', CameraParam)</l>
<c></c>
<c>* --- Inizializzazione file CSV ---</c>
<l>file_exists(outputCSVFile, FileExists)</l>
<l>if (FileExists == 1)</l>
<l>    delete_file(outputCSVFile)</l>
<l>endif</l>
<l>open_file(outputCSVFile, 'append', FileHandle)</l>
<l>fwrite_string(FileHandle, 'image_name,M1_tx_mm,M1_ty_mm,M1_tz_mm,M2_tx_mm,M2_ty_mm,M2_tz_mm,tx_rel_mm,ty_rel_mm,tz_rel_mm,distance_mm,error_mm,qx_rel,qy_rel,qz_rel,qw_rel,elapsed_time_s\n')</l>
<c></c>
<c>* --- Elaborazione immagini ---</c>
<l>list_files(imageFolder, ['files','follow_links','recursive'], ImageFiles)</l>
<l>tuple_regexp_select(ImageFiles, ['\\.(tif|tiff)$','ignore_case'], ImageFiles)</l>
<c></c>
<l>for ImageIndex := 0 to |ImageFiles| - 1 by 1</l>
<l>    ImageFile := ImageFiles[ImageIndex]</l>
<l>    read_image(Image, ImageFile)</l>
<c>    </c>
<c>    * Estrai nome file senza percorso</c>
<l>    tuple_split(ImageFile, '/', PathParts)</l>
<l>    ImageName := PathParts[|PathParts|-1]</l>
<c>    </c>
<c>    * Cronometra tempo di elaborazione</c>
<l>    count_seconds(StartTime)</l>
<c>    </c>
<c>    * --- Ricerca marker ---</c>
<l>    try</l>
<c>        * Cerca primo marker</c>
<l>        CH_Find_Calib_Pattern_double (Image, CameraParam, caltabFile, WindowHandle, Found1, Found2, Marker1Pose, Marker2Pose, CalibDataID_1, CalibDataID_2)</l>
<c></c>
<c>        * Verifichiamo che siano stati trovati i due marker</c>
<l>        if( Found1 == 0 or Found2 == 0)</l>
<l>            dev_display(Image)</l>
<l>            disp_message (WindowHandle, 'Errore - Trovato uno o nessun marker', 'window', 12, 12, 'red', 'true')</l>
<l>            throw('Non ho trovato tutti i marker')</l>
<l>        endif</l>
<c></c>
<c>        * Calcola tempo di elaborazione</c>
<l>        count_seconds(EndTime)</l>
<l>        ElapsedTime := EndTime - StartTime</l>
<c>        </c>
<c>        * -- Estrazione posiz. assoluta marker in mm --</c>
<l>        M1_tx := Marker1Pose[0] * 1000</l>
<l>        M1_ty := Marker1Pose[1] * 1000</l>
<l>        M1_tz := Marker1Pose[2] * 1000</l>
<c></c>
<l>        M2_tx := Marker2Pose[0] * 1000</l>
<l>        M2_ty := Marker2Pose[1] * 1000</l>
<l>        M2_tz := Marker2Pose[2] * 1000</l>
<c>        </c>
<c>        * --- Calcola trasformazione relativa ---</c>
<c>        * Pose marker1 -&gt; sistema di coordinate mondo</c>
<l>        pose_to_hom_mat3d(Marker1Pose, HomMat3D1)</l>
<c>        </c>
<c>        * Pose marker2 -&gt; sistema di coordinate mondo</c>
<l>        pose_to_hom_mat3d(Marker2Pose, HomMat3D2)</l>
<c>        </c>
<c>        * Trasformazione relativa: da marker1 a marker2</c>
<l>        hom_mat3d_invert(HomMat3D1, HomMat3D1_Inv)</l>
<l>        hom_mat3d_compose(HomMat3D1_Inv, HomMat3D2, HomMat3D_Rel)</l>
<c>        </c>
<c>        * Converti in pose relativa</c>
<l>        hom_mat3d_to_pose(HomMat3D_Rel, RelPose)</l>
<c>        </c>
<c>        * Estrai componenti della pose</c>
<l>        tx := RelPose[0] * 1000  // Converti in mm</l>
<l>        ty := RelPose[1] * 1000</l>
<l>        tz := RelPose[2] * 1000</l>
<c>        </c>
<c>        * Calcola distanza effettiva</c>
<l>        distance := sqrt(tx*tx + ty*ty + tz*tz)</l>
<c>        </c>
<c>        * Calcola errore rispetto alla distanza nominale</c>
<l>        error := distance - (markerDistanceNominal * 1000)</l>
<c>        </c>
<c>        * Estrai quaternione dalla pose relativa</c>
<l>        pose_to_quat(RelPose, Quat)</l>
<l>        Qx := Quat[0]</l>
<l>        Qy := Quat[1]</l>
<l>        Qz := Quat[2]</l>
<l>        Qw := Quat[3]</l>
<c>        </c>
<c>        * --- Scrivi risultati nel CSV ---</c>
<l>        Line := ImageName + ',' + M1_tx + ',' + M1_ty + ','+ M1_tz + ','+ M2_tx + ','+ M2_ty + ','+ M2_tz + ',' + tx + ',' + ty + ',' + tz + ',' + distance + ',' + error + ',' + Qx + ',' + Qy + ',' + Qz + ',' + Qw + ',' + ElapsedTime + '\n'</l>
<l>        fwrite_string(FileHandle, Line)</l>
<l>        *flush_buffer(FileHandle)</l>
<c></c>
<l>        *disp_message(3600, 'Marker trovati in ' + ImageName + '\nTempo: ' + ElapsedTime + 's', 'window', 12, 12, 'black', 'true')</l>
<l>        *disp_continue_message(3600, 'black', 'true')</l>
<c>               </c>
<l>    catch (Exception)</l>
<c>        * Se non trova entrambi i marker, salta l'immagine</c>
<l>        continue</l>
<l>    endtry</l>
<l>endfor</l>
<c></c>
<c>* --- Pulizia finale ---</c>
<l>close_file(FileHandle)</l>
<l>dev_update_on()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
